# Nom du workflow qui apparaîtra dans l'onglet "Actions" de GitHub
name: Build and Deploy React App

# Déclencheur du workflow
on:
  # Se déclenche à chaque push sur la branche 'main'
  push:
    branches:
      - test
  # Permet de lancer le workflow manuellement depuis l'interface GitHub
  workflow_dispatch:

# Définition des tâches (jobs) à exécuter
jobs:
  build-and-deploy:
    # Le type de machine virtuelle à utiliser
    runs-on: ubuntu-latest

    # Séquence des étapes à exécuter pour ce job
    steps:
      # Étape 1: Récupérer le code du dépôt
      - name: Checkout code
        uses: actions/checkout@v4

      # Étape 2: Configurer l'environnement Node.js
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20' # Spécifiez la version de Node que vous utilisez
          cache: 'npm' # Met en cache les dépendances pour accélérer les builds futurs

      # Étape 3: Installer les dépendances du projet
      - name: Install dependencies
        run: npm ci # 'npm ci' est plus rapide et plus strict que 'npm install', idéal pour la CI/CD

      # Étape 4: Builder l'application React
      - name: Build project
        run: npm run build # Cette commande exécute le script 'build' de votre package.json (Vite va créer le dossier 'dist')

      # Étape 5: Déployer les fichiers sur le serveur via SSH (rsync)
      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main # Utilisation d'une action communautaire populaire pour le déploiement
        with:
          # Clé privée SSH pour l'authentification
          SSH_PRIVATE_KEY: ${{ secrets.SERVER_SSH_KEY }}
          # Hôte distant (IP ou domaine)
          REMOTE_HOST: ${{ secrets.SERVER_HOST }}
          # Utilisateur pour la connexion SSH
          REMOTE_USER: ${{ secrets.SERVER_USER }}
          # Dossier source à copier (le contenu de 'dist')
          SOURCE: "dist/"
          # Dossier de destination sur le serveur
          TARGET: ${{ secrets.TARGET_DIR }}
          # Arguments pour rsync. '--delete' supprime les anciens fichiers sur la destination
          ARGS: "--recursive --compress --delete"
